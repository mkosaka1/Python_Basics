{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The perimeter of s1 square is 21\n"
     ]
    }
   ],
   "source": [
    "class Square:\n",
    "    def __init__ (self,a,b,c,d):\n",
    "        self.a=a\n",
    "        self.b=b\n",
    "        self.c=c\n",
    "        self.d=d\n",
    "    \n",
    "    def add(self):\n",
    "        perimeter=self.a + self.b + self.c + self.d\n",
    "        return perimeter\n",
    "    \n",
    "s1=Square(5,7,4,5)\n",
    "perimeter=s1.add()\n",
    "print('The perimeter of s1 square is', perimeter)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Employee:\n",
    "    pass\n",
    "\n",
    "employee1=Employee()\n",
    "employee2=Employee()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Employee:\n",
    "    pass\n",
    "\n",
    "employee1="
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matt\n",
      "60000\n",
      "Penelope\n",
      "90000\n"
     ]
    }
   ],
   "source": [
    "class Employee:\n",
    "    \n",
    "    def __init__(self, name, income):\n",
    "        self.name=name\n",
    "        self.income=income\n",
    "        \n",
    "    def earning(self):\n",
    "        if self.income >= 80000:\n",
    "            return'High earning'\n",
    "        elif (self.income>=50000) & (self.income<80000):\n",
    "            return'Medium earning'\n",
    "        else:\n",
    "            return'Low earning'\n",
    "        \n",
    "\n",
    "employee1=Employee(\"Matt\",60000)\n",
    "print(employee1.name)\n",
    "print(employee1.income)\n",
    "\n",
    "employee2=Employee(\"Penelope\",90000)\n",
    "print(employee2.name)\n",
    "print(employee2.income)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Matt = Medium earning\n",
      "Penelope = High earning\n"
     ]
    }
   ],
   "source": [
    "level_earning=employee1.earning()\n",
    "print(employee1.name,\"=\", level_earning)\n",
    "level_earning=employee2.earning()\n",
    "print(employee2.name,\"=\", level_earning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
